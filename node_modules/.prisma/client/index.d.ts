
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.1
 * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model articles
 */

export type articles = {
  id: number
  user_id: number
  title: string
  body: string
  status: articles_status
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

/**
 * Model comments
 */

export type comments = {
  id: number
  article_id: number
  user_id: number
  body: string
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}

/**
 * Model users
 */

export type users = {
  id: number
  email: string
  password: string
  status: users_status
  created_at: Date | null
  updated_at: Date | null
  deleted_at: Date | null
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const articles_status: {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  DELETED: 'DELETED'
};

export type articles_status = (typeof articles_status)[keyof typeof articles_status]


export const users_status: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE'
};

export type users_status = (typeof users_status)[keyof typeof users_status]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Articles
 * const articles = await prisma.articles.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Articles
   * const articles = await prisma.articles.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.articles`: Exposes CRUD operations for the **articles** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.articles.findMany()
    * ```
    */
  get articles(): Prisma.articlesDelegate;

  /**
   * `prisma.comments`: Exposes CRUD operations for the **comments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comments.findMany()
    * ```
    */
  get comments(): Prisma.commentsDelegate;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.1
   * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    articles: 'articles',
    comments: 'comments',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model articles
   */


  export type AggregateArticles = {
    count: number | null
    avg: ArticlesAvgAggregateOutputType | null
    sum: ArticlesSumAggregateOutputType | null
    min: ArticlesMinAggregateOutputType | null
    max: ArticlesMaxAggregateOutputType | null
  }

  export type ArticlesAvgAggregateOutputType = {
    id: number
    user_id: number
  }

  export type ArticlesSumAggregateOutputType = {
    id: number
    user_id: number
  }

  export type ArticlesMinAggregateOutputType = {
    id: number
    user_id: number
    title: string | null
    body: string | null
    status: articles_status | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type ArticlesMaxAggregateOutputType = {
    id: number
    user_id: number
    title: string | null
    body: string | null
    status: articles_status | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type ArticlesCountAggregateOutputType = {
    id: number
    user_id: number
    title: number | null
    body: number | null
    status: number | null
    created_at: number | null
    updated_at: number | null
    deleted_at: number | null
    _all: number
  }


  export type ArticlesAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ArticlesSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type ArticlesMinAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    body?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type ArticlesMaxAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    body?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type ArticlesCountAggregateInputType = {
    id?: true
    user_id?: true
    title?: true
    body?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type AggregateArticlesArgs = {
    where?: articlesWhereInput
    orderBy?: Enumerable<articlesOrderByInput>
    cursor?: articlesWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: ArticlesAvgAggregateInputType
    sum?: ArticlesSumAggregateInputType
    min?: ArticlesMinAggregateInputType
    max?: ArticlesMaxAggregateInputType
  }

  export type GetArticlesAggregateType<T extends AggregateArticlesArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetArticlesAggregateScalarType<T[P]>
  }

  export type GetArticlesAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof ArticlesAvgAggregateOutputType ? ArticlesAvgAggregateOutputType[P] : never
  }

    



  export type articlesSelect = {
    id?: boolean
    user_id?: boolean
    title?: boolean
    body?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    users?: boolean | usersArgs
    comments?: boolean | FindManycommentsArgs
  }

  export type articlesInclude = {
    users?: boolean | usersArgs
    comments?: boolean | FindManycommentsArgs
  }

  export type articlesGetPayload<
    S extends boolean | null | undefined | articlesArgs,
    U = keyof S
      > = S extends true
        ? articles
    : S extends undefined
    ? never
    : S extends articlesArgs | FindManyarticlesArgs
    ?'include' extends U
    ? articles  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? usersGetPayload<S['include'][P]> :
        P extends 'comments'
        ? Array < commentsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof articles ?articles [P]
  : 
          P extends 'users'
        ? usersGetPayload<S['select'][P]> :
        P extends 'comments'
        ? Array < commentsGetPayload<S['select'][P]>>  : never
  } 
    : articles
  : articles


  export interface articlesDelegate {
    /**
     * Find zero or one Articles that matches the filter.
     * @param {FindUniquearticlesArgs} args - Arguments to find a Articles
     * @example
     * // Get one Articles
     * const articles = await prisma.articles.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquearticlesArgs>(
      args: Subset<T, FindUniquearticlesArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles | null>, Prisma__articlesClient<articlesGetPayload<T> | null>>
    /**
     * Find the first Articles that matches the filter.
     * @param {FindFirstarticlesArgs} args - Arguments to find a Articles
     * @example
     * // Get one Articles
     * const articles = await prisma.articles.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstarticlesArgs>(
      args?: Subset<T, FindFirstarticlesArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles | null>, Prisma__articlesClient<articlesGetPayload<T> | null>>
    /**
     * Find zero or more Articles that matches the filter.
     * @param {FindManyarticlesArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.articles.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.articles.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articlesWithIdOnly = await prisma.articles.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyarticlesArgs>(
      args?: Subset<T, FindManyarticlesArgs>
    ): CheckSelect<T, Promise<Array<articles>>, Promise<Array<articlesGetPayload<T>>>>
    /**
     * Create a Articles.
     * @param {articlesCreateArgs} args - Arguments to create a Articles.
     * @example
     * // Create one Articles
     * const Articles = await prisma.articles.create({
     *   data: {
     *     // ... data to create a Articles
     *   }
     * })
     * 
    **/
    create<T extends articlesCreateArgs>(
      args: Subset<T, articlesCreateArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles>, Prisma__articlesClient<articlesGetPayload<T>>>
    /**
     * Delete a Articles.
     * @param {articlesDeleteArgs} args - Arguments to delete one Articles.
     * @example
     * // Delete one Articles
     * const Articles = await prisma.articles.delete({
     *   where: {
     *     // ... filter to delete one Articles
     *   }
     * })
     * 
    **/
    delete<T extends articlesDeleteArgs>(
      args: Subset<T, articlesDeleteArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles>, Prisma__articlesClient<articlesGetPayload<T>>>
    /**
     * Update one Articles.
     * @param {articlesUpdateArgs} args - Arguments to update one Articles.
     * @example
     * // Update one Articles
     * const articles = await prisma.articles.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends articlesUpdateArgs>(
      args: Subset<T, articlesUpdateArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles>, Prisma__articlesClient<articlesGetPayload<T>>>
    /**
     * Delete zero or more Articles.
     * @param {articlesDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.articles.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends articlesDeleteManyArgs>(
      args?: Subset<T, articlesDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Articles.
     * @param {articlesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const articles = await prisma.articles.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends articlesUpdateManyArgs>(
      args: Subset<T, articlesUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Articles.
     * @param {articlesUpsertArgs} args - Arguments to update or create a Articles.
     * @example
     * // Update or create a Articles
     * const articles = await prisma.articles.upsert({
     *   create: {
     *     // ... data to create a Articles
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Articles we want to update
     *   }
     * })
    **/
    upsert<T extends articlesUpsertArgs>(
      args: Subset<T, articlesUpsertArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles>, Prisma__articlesClient<articlesGetPayload<T>>>
    /**
     * Find zero or one Articles that matches the filter.
     * @param {FindUniquearticlesArgs} args - Arguments to find a Articles
     * @deprecated This will be deprecated please use prisma.articles.findUnique
     * @example
     * // Get one Articles
     * const articles = await prisma.articles.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquearticlesArgs>(
      args: Subset<T, FindUniquearticlesArgs>
    ): CheckSelect<T, Prisma__articlesClient<articles | null>, Prisma__articlesClient<articlesGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyarticlesArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateArticlesArgs>(args: Subset<T, AggregateArticlesArgs>): Promise<GetArticlesAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for articles.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__articlesClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    comments<T extends FindManycommentsArgs = {}>(args?: Subset<T, FindManycommentsArgs>): CheckSelect<T, Promise<Array<comments>>, Promise<Array<commentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * articles findUnique
   */
  export type FindUniquearticlesArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * Filter, which articles to fetch.
    **/
    where: articlesWhereUniqueInput
  }


  /**
   * articles findFirst
   */
  export type FindFirstarticlesArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * Filter, which articles to fetch.
    **/
    where?: articlesWhereInput
    orderBy?: Enumerable<articlesOrderByInput>
    cursor?: articlesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ArticlesScalarFieldEnum>
  }


  /**
   * articles findMany
   */
  export type FindManyarticlesArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * Filter, which articles to fetch.
    **/
    where?: articlesWhereInput
    /**
     * Determine the order of the articles to fetch.
    **/
    orderBy?: Enumerable<articlesOrderByInput>
    /**
     * Sets the position for listing articles.
    **/
    cursor?: articlesWhereUniqueInput
    /**
     * The number of articles to fetch. If negative number, it will take articles before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` articles.
    **/
    skip?: number
    distinct?: Enumerable<ArticlesScalarFieldEnum>
  }


  /**
   * articles create
   */
  export type articlesCreateArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * The data needed to create a articles.
    **/
    data: articlesCreateInput
  }


  /**
   * articles update
   */
  export type articlesUpdateArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * The data needed to update a articles.
    **/
    data: articlesUpdateInput
    /**
     * Choose, which articles to update.
    **/
    where: articlesWhereUniqueInput
  }


  /**
   * articles updateMany
   */
  export type articlesUpdateManyArgs = {
    data: articlesUpdateManyMutationInput
    where?: articlesWhereInput
  }


  /**
   * articles upsert
   */
  export type articlesUpsertArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * The filter to search for the articles to update in case it exists.
    **/
    where: articlesWhereUniqueInput
    /**
     * In case the articles found by the `where` argument doesn't exist, create a new articles with this data.
    **/
    create: articlesCreateInput
    /**
     * In case the articles was found with the provided `where` argument, update it with this data.
    **/
    update: articlesUpdateInput
  }


  /**
   * articles delete
   */
  export type articlesDeleteArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
    /**
     * Filter which articles to delete.
    **/
    where: articlesWhereUniqueInput
  }


  /**
   * articles deleteMany
   */
  export type articlesDeleteManyArgs = {
    where?: articlesWhereInput
  }


  /**
   * articles without action
   */
  export type articlesArgs = {
    /**
     * Select specific fields to fetch from the articles
    **/
    select?: articlesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: articlesInclude | null
  }



  /**
   * Model comments
   */


  export type AggregateComments = {
    count: number | null
    avg: CommentsAvgAggregateOutputType | null
    sum: CommentsSumAggregateOutputType | null
    min: CommentsMinAggregateOutputType | null
    max: CommentsMaxAggregateOutputType | null
  }

  export type CommentsAvgAggregateOutputType = {
    id: number
    article_id: number
    user_id: number
  }

  export type CommentsSumAggregateOutputType = {
    id: number
    article_id: number
    user_id: number
  }

  export type CommentsMinAggregateOutputType = {
    id: number
    article_id: number
    user_id: number
    body: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type CommentsMaxAggregateOutputType = {
    id: number
    article_id: number
    user_id: number
    body: string | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type CommentsCountAggregateOutputType = {
    id: number
    article_id: number
    user_id: number
    body: number | null
    created_at: number | null
    updated_at: number | null
    deleted_at: number | null
    _all: number
  }


  export type CommentsAvgAggregateInputType = {
    id?: true
    article_id?: true
    user_id?: true
  }

  export type CommentsSumAggregateInputType = {
    id?: true
    article_id?: true
    user_id?: true
  }

  export type CommentsMinAggregateInputType = {
    id?: true
    article_id?: true
    user_id?: true
    body?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type CommentsMaxAggregateInputType = {
    id?: true
    article_id?: true
    user_id?: true
    body?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type CommentsCountAggregateInputType = {
    id?: true
    article_id?: true
    user_id?: true
    body?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type AggregateCommentsArgs = {
    where?: commentsWhereInput
    orderBy?: Enumerable<commentsOrderByInput>
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: CommentsAvgAggregateInputType
    sum?: CommentsSumAggregateInputType
    min?: CommentsMinAggregateInputType
    max?: CommentsMaxAggregateInputType
  }

  export type GetCommentsAggregateType<T extends AggregateCommentsArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCommentsAggregateScalarType<T[P]>
  }

  export type GetCommentsAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CommentsAvgAggregateOutputType ? CommentsAvgAggregateOutputType[P] : never
  }

    



  export type commentsSelect = {
    id?: boolean
    article_id?: boolean
    user_id?: boolean
    body?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    articles?: boolean | articlesArgs
    users?: boolean | usersArgs
  }

  export type commentsInclude = {
    articles?: boolean | articlesArgs
    users?: boolean | usersArgs
  }

  export type commentsGetPayload<
    S extends boolean | null | undefined | commentsArgs,
    U = keyof S
      > = S extends true
        ? comments
    : S extends undefined
    ? never
    : S extends commentsArgs | FindManycommentsArgs
    ?'include' extends U
    ? comments  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'articles'
        ? articlesGetPayload<S['include'][P]> :
        P extends 'users'
        ? usersGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof comments ?comments [P]
  : 
          P extends 'articles'
        ? articlesGetPayload<S['select'][P]> :
        P extends 'users'
        ? usersGetPayload<S['select'][P]> : never
  } 
    : comments
  : comments


  export interface commentsDelegate {
    /**
     * Find zero or one Comments that matches the filter.
     * @param {FindUniquecommentsArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquecommentsArgs>(
      args: Subset<T, FindUniquecommentsArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments | null>, Prisma__commentsClient<commentsGetPayload<T> | null>>
    /**
     * Find the first Comments that matches the filter.
     * @param {FindFirstcommentsArgs} args - Arguments to find a Comments
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstcommentsArgs>(
      args?: Subset<T, FindFirstcommentsArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments | null>, Prisma__commentsClient<commentsGetPayload<T> | null>>
    /**
     * Find zero or more Comments that matches the filter.
     * @param {FindManycommentsArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comments.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentsWithIdOnly = await prisma.comments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManycommentsArgs>(
      args?: Subset<T, FindManycommentsArgs>
    ): CheckSelect<T, Promise<Array<comments>>, Promise<Array<commentsGetPayload<T>>>>
    /**
     * Create a Comments.
     * @param {commentsCreateArgs} args - Arguments to create a Comments.
     * @example
     * // Create one Comments
     * const Comments = await prisma.comments.create({
     *   data: {
     *     // ... data to create a Comments
     *   }
     * })
     * 
    **/
    create<T extends commentsCreateArgs>(
      args: Subset<T, commentsCreateArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>
    /**
     * Delete a Comments.
     * @param {commentsDeleteArgs} args - Arguments to delete one Comments.
     * @example
     * // Delete one Comments
     * const Comments = await prisma.comments.delete({
     *   where: {
     *     // ... filter to delete one Comments
     *   }
     * })
     * 
    **/
    delete<T extends commentsDeleteArgs>(
      args: Subset<T, commentsDeleteArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>
    /**
     * Update one Comments.
     * @param {commentsUpdateArgs} args - Arguments to update one Comments.
     * @example
     * // Update one Comments
     * const comments = await prisma.comments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends commentsUpdateArgs>(
      args: Subset<T, commentsUpdateArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>
    /**
     * Delete zero or more Comments.
     * @param {commentsDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends commentsDeleteManyArgs>(
      args?: Subset<T, commentsDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Comments.
     * @param {commentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comments = await prisma.comments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends commentsUpdateManyArgs>(
      args: Subset<T, commentsUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Comments.
     * @param {commentsUpsertArgs} args - Arguments to update or create a Comments.
     * @example
     * // Update or create a Comments
     * const comments = await prisma.comments.upsert({
     *   create: {
     *     // ... data to create a Comments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comments we want to update
     *   }
     * })
    **/
    upsert<T extends commentsUpsertArgs>(
      args: Subset<T, commentsUpsertArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments>, Prisma__commentsClient<commentsGetPayload<T>>>
    /**
     * Find zero or one Comments that matches the filter.
     * @param {FindUniquecommentsArgs} args - Arguments to find a Comments
     * @deprecated This will be deprecated please use prisma.comments.findUnique
     * @example
     * // Get one Comments
     * const comments = await prisma.comments.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquecommentsArgs>(
      args: Subset<T, FindUniquecommentsArgs>
    ): CheckSelect<T, Prisma__commentsClient<comments | null>, Prisma__commentsClient<commentsGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManycommentsArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateCommentsArgs>(args: Subset<T, AggregateCommentsArgs>): Promise<GetCommentsAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for comments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__commentsClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    articles<T extends articlesArgs = {}>(args?: Subset<T, articlesArgs>): CheckSelect<T, Prisma__articlesClient<articles | null>, Prisma__articlesClient<articlesGetPayload<T> | null>>;

    users<T extends usersArgs = {}>(args?: Subset<T, usersArgs>): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * comments findUnique
   */
  export type FindUniquecommentsArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments findFirst
   */
  export type FindFirstcommentsArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
    **/
    where?: commentsWhereInput
    orderBy?: Enumerable<commentsOrderByInput>
    cursor?: commentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * comments findMany
   */
  export type FindManycommentsArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * Filter, which comments to fetch.
    **/
    where?: commentsWhereInput
    /**
     * Determine the order of the comments to fetch.
    **/
    orderBy?: Enumerable<commentsOrderByInput>
    /**
     * Sets the position for listing comments.
    **/
    cursor?: commentsWhereUniqueInput
    /**
     * The number of comments to fetch. If negative number, it will take comments before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` comments.
    **/
    skip?: number
    distinct?: Enumerable<CommentsScalarFieldEnum>
  }


  /**
   * comments create
   */
  export type commentsCreateArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * The data needed to create a comments.
    **/
    data: commentsCreateInput
  }


  /**
   * comments update
   */
  export type commentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * The data needed to update a comments.
    **/
    data: commentsUpdateInput
    /**
     * Choose, which comments to update.
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments updateMany
   */
  export type commentsUpdateManyArgs = {
    data: commentsUpdateManyMutationInput
    where?: commentsWhereInput
  }


  /**
   * comments upsert
   */
  export type commentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * The filter to search for the comments to update in case it exists.
    **/
    where: commentsWhereUniqueInput
    /**
     * In case the comments found by the `where` argument doesn't exist, create a new comments with this data.
    **/
    create: commentsCreateInput
    /**
     * In case the comments was found with the provided `where` argument, update it with this data.
    **/
    update: commentsUpdateInput
  }


  /**
   * comments delete
   */
  export type commentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
    /**
     * Filter which comments to delete.
    **/
    where: commentsWhereUniqueInput
  }


  /**
   * comments deleteMany
   */
  export type commentsDeleteManyArgs = {
    where?: commentsWhereInput
  }


  /**
   * comments without action
   */
  export type commentsArgs = {
    /**
     * Select specific fields to fetch from the comments
    **/
    select?: commentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: commentsInclude | null
  }



  /**
   * Model users
   */


  export type AggregateUsers = {
    count: number | null
    avg: UsersAvgAggregateOutputType | null
    sum: UsersSumAggregateOutputType | null
    min: UsersMinAggregateOutputType | null
    max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number
  }

  export type UsersSumAggregateOutputType = {
    id: number
  }

  export type UsersMinAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
    status: users_status | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number
    email: string | null
    password: string | null
    status: users_status | null
    created_at: Date | null
    updated_at: Date | null
    deleted_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number | null
    password: number | null
    status: number | null
    created_at: number | null
    updated_at: number | null
    deleted_at: number | null
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    status?: true
    created_at?: true
    updated_at?: true
    deleted_at?: true
    _all?: true
  }

  export type AggregateUsersArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: UsersAvgAggregateInputType
    sum?: UsersSumAggregateInputType
    min?: UsersMinAggregateInputType
    max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends AggregateUsersArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUsersAggregateScalarType<T[P]>
  }

  export type GetUsersAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UsersAvgAggregateOutputType ? UsersAvgAggregateOutputType[P] : never
  }

    



  export type usersSelect = {
    id?: boolean
    email?: boolean
    password?: boolean
    status?: boolean
    created_at?: boolean
    updated_at?: boolean
    deleted_at?: boolean
    articles?: boolean | FindManyarticlesArgs
    comments?: boolean | FindManycommentsArgs
  }

  export type usersInclude = {
    articles?: boolean | FindManyarticlesArgs
    comments?: boolean | FindManycommentsArgs
  }

  export type usersGetPayload<
    S extends boolean | null | undefined | usersArgs,
    U = keyof S
      > = S extends true
        ? users
    : S extends undefined
    ? never
    : S extends usersArgs | FindManyusersArgs
    ?'include' extends U
    ? users  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'articles'
        ? Array < articlesGetPayload<S['include'][P]>>  :
        P extends 'comments'
        ? Array < commentsGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof users ?users [P]
  : 
          P extends 'articles'
        ? Array < articlesGetPayload<S['select'][P]>>  :
        P extends 'comments'
        ? Array < commentsGetPayload<S['select'][P]>>  : never
  } 
    : users
  : users


  export interface usersDelegate {
    /**
     * Find zero or one Users that matches the filter.
     * @param {FindUniqueusersArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueusersArgs>(
      args: Subset<T, FindUniqueusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>
    /**
     * Find the first Users that matches the filter.
     * @param {FindFirstusersArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstusersArgs>(
      args?: Subset<T, FindFirstusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>
    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyusersArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyusersArgs>(
      args?: Subset<T, FindManyusersArgs>
    ): CheckSelect<T, Promise<Array<users>>, Promise<Array<usersGetPayload<T>>>>
    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: Subset<T, usersCreateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: Subset<T, usersDeleteArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: Subset<T, usersUpdateArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: Subset<T, usersDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Users.
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: Subset<T, usersUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: Subset<T, usersUpsertArgs>
    ): CheckSelect<T, Prisma__usersClient<users>, Prisma__usersClient<usersGetPayload<T>>>
    /**
     * Find zero or one Users that matches the filter.
     * @param {FindUniqueusersArgs} args - Arguments to find a Users
     * @deprecated This will be deprecated please use prisma.users.findUnique
     * @example
     * // Get one Users
     * const users = await prisma.users.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueusersArgs>(
      args: Subset<T, FindUniqueusersArgs>
    ): CheckSelect<T, Prisma__usersClient<users | null>, Prisma__usersClient<usersGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyusersArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateUsersArgs>(args: Subset<T, AggregateUsersArgs>): Promise<GetUsersAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    articles<T extends FindManyarticlesArgs = {}>(args?: Subset<T, FindManyarticlesArgs>): CheckSelect<T, Promise<Array<articles>>, Promise<Array<articlesGetPayload<T>>>>;

    comments<T extends FindManycommentsArgs = {}>(args?: Subset<T, FindManycommentsArgs>): CheckSelect<T, Promise<Array<comments>>, Promise<Array<commentsGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type FindUniqueusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type FindFirstusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByInput>
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type FindManyusersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
    **/
    where?: usersWhereInput
    /**
     * Determine the order of the users to fetch.
    **/
    orderBy?: Enumerable<usersOrderByInput>
    /**
     * Sets the position for listing users.
    **/
    cursor?: usersWhereUniqueInput
    /**
     * The number of users to fetch. If negative number, it will take users before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` users.
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
    **/
    data: usersCreateInput
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
    **/
    data: usersUpdateInput
    /**
     * Choose, which users to update.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    data: usersUpdateManyMutationInput
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
    **/
    create: usersCreateInput
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
    **/
    update: usersUpdateInput
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    where?: usersWhereInput
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: usersInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ArticlesScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    title: 'title',
    body: 'body',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type ArticlesScalarFieldEnum = (typeof ArticlesScalarFieldEnum)[keyof typeof ArticlesScalarFieldEnum]


  export const CommentsScalarFieldEnum: {
    id: 'id',
    article_id: 'article_id',
    user_id: 'user_id',
    body: 'body',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type CommentsScalarFieldEnum = (typeof CommentsScalarFieldEnum)[keyof typeof CommentsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    status: 'status',
    created_at: 'created_at',
    updated_at: 'updated_at',
    deleted_at: 'deleted_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type articlesWhereInput = {
    AND?: Enumerable<articlesWhereInput>
    OR?: Enumerable<articlesWhereInput>
    NOT?: Enumerable<articlesWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    title?: StringFilter | string
    body?: StringFilter | string
    status?: Enumarticles_statusFilter | articles_status
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    deleted_at?: DateTimeNullableFilter | Date | string | null
    users?: XOR<usersWhereInput, UsersRelationFilter>
    comments?: CommentsListRelationFilter
  }

  export type articlesOrderByInput = {
    id?: SortOrder
    user_id?: SortOrder
    title?: SortOrder
    body?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type articlesWhereUniqueInput = {
    id?: number
  }

  export type commentsWhereInput = {
    AND?: Enumerable<commentsWhereInput>
    OR?: Enumerable<commentsWhereInput>
    NOT?: Enumerable<commentsWhereInput>
    id?: IntFilter | number
    article_id?: IntFilter | number
    user_id?: IntFilter | number
    body?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    deleted_at?: DateTimeNullableFilter | Date | string | null
    articles?: XOR<articlesWhereInput, ArticlesRelationFilter>
    users?: XOR<usersWhereInput, UsersRelationFilter>
  }

  export type commentsOrderByInput = {
    id?: SortOrder
    article_id?: SortOrder
    user_id?: SortOrder
    body?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type commentsWhereUniqueInput = {
    id?: number
  }

  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    password?: StringFilter | string
    status?: Enumusers_statusFilter | users_status
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    deleted_at?: DateTimeNullableFilter | Date | string | null
    articles?: ArticlesListRelationFilter
    comments?: CommentsListRelationFilter
  }

  export type usersOrderByInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    status?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    deleted_at?: SortOrder
  }

  export type usersWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type articlesCreateInput = {
    title: string
    body: string
    status?: articles_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    users: usersCreateOneWithoutArticlesInput
    comments?: commentsCreateManyWithoutArticlesInput
  }

  export type articlesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: Enumarticles_statusFieldUpdateOperationsInput | articles_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutArticlesInput
    comments?: commentsUpdateManyWithoutArticlesInput
  }

  export type articlesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: Enumarticles_statusFieldUpdateOperationsInput | articles_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type commentsCreateInput = {
    body: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    articles: articlesCreateOneWithoutCommentsInput
    users: usersCreateOneWithoutCommentsInput
  }

  export type commentsUpdateInput = {
    body?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    articles?: articlesUpdateOneRequiredWithoutCommentsInput
    users?: usersUpdateOneRequiredWithoutCommentsInput
  }

  export type commentsUpdateManyMutationInput = {
    body?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    email: string
    password: string
    status?: users_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    articles?: articlesCreateManyWithoutUsersInput
    comments?: commentsCreateManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: Enumusers_statusFieldUpdateOperationsInput | users_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    articles?: articlesUpdateManyWithoutUsersInput
    comments?: commentsUpdateManyWithoutUsersInput
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: Enumusers_statusFieldUpdateOperationsInput | users_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type Enumarticles_statusFilter = {
    equals?: articles_status
    in?: Enumerable<articles_status>
    notIn?: Enumerable<articles_status>
    not?: NestedEnumarticles_statusFilter | articles_status
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type CommentsListRelationFilter = {
    every?: commentsWhereInput
    some?: commentsWhereInput
    none?: commentsWhereInput
  }

  export type ArticlesRelationFilter = {
    is?: articlesWhereInput
    isNot?: articlesWhereInput
  }

  export type Enumusers_statusFilter = {
    equals?: users_status
    in?: Enumerable<users_status>
    notIn?: Enumerable<users_status>
    not?: NestedEnumusers_statusFilter | users_status
  }

  export type ArticlesListRelationFilter = {
    every?: articlesWhereInput
    some?: articlesWhereInput
    none?: articlesWhereInput
  }

  export type usersCreateOneWithoutArticlesInput = {
    create?: usersCreateWithoutArticlesInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutarticlesInput
  }

  export type commentsCreateManyWithoutArticlesInput = {
    create?: Enumerable<commentsCreateWithoutArticlesInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutarticlesInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type Enumarticles_statusFieldUpdateOperationsInput = {
    set?: articles_status
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutArticlesInput = {
    create?: usersCreateWithoutArticlesInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutArticlesInput
    upsert?: usersUpsertWithoutArticlesInput
    connectOrCreate?: usersCreateOrConnectWithoutarticlesInput
  }

  export type commentsUpdateManyWithoutArticlesInput = {
    create?: Enumerable<commentsCreateWithoutArticlesInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutArticlesInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutArticlesInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutArticlesInput>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutarticlesInput>
  }

  export type articlesCreateOneWithoutCommentsInput = {
    create?: articlesCreateWithoutCommentsInput
    connect?: articlesWhereUniqueInput
    connectOrCreate?: articlesCreateOrConnectWithoutcommentsInput
  }

  export type usersCreateOneWithoutCommentsInput = {
    create?: usersCreateWithoutCommentsInput
    connect?: usersWhereUniqueInput
    connectOrCreate?: usersCreateOrConnectWithoutcommentsInput
  }

  export type articlesUpdateOneRequiredWithoutCommentsInput = {
    create?: articlesCreateWithoutCommentsInput
    connect?: articlesWhereUniqueInput
    update?: articlesUpdateWithoutCommentsInput
    upsert?: articlesUpsertWithoutCommentsInput
    connectOrCreate?: articlesCreateOrConnectWithoutcommentsInput
  }

  export type usersUpdateOneRequiredWithoutCommentsInput = {
    create?: usersCreateWithoutCommentsInput
    connect?: usersWhereUniqueInput
    update?: usersUpdateWithoutCommentsInput
    upsert?: usersUpsertWithoutCommentsInput
    connectOrCreate?: usersCreateOrConnectWithoutcommentsInput
  }

  export type articlesCreateManyWithoutUsersInput = {
    create?: Enumerable<articlesCreateWithoutUsersInput>
    connect?: Enumerable<articlesWhereUniqueInput>
    connectOrCreate?: Enumerable<articlesCreateOrConnectWithoutusersInput>
  }

  export type commentsCreateManyWithoutUsersInput = {
    create?: Enumerable<commentsCreateWithoutUsersInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutusersInput>
  }

  export type Enumusers_statusFieldUpdateOperationsInput = {
    set?: users_status
  }

  export type articlesUpdateManyWithoutUsersInput = {
    create?: Enumerable<articlesCreateWithoutUsersInput>
    connect?: Enumerable<articlesWhereUniqueInput>
    set?: Enumerable<articlesWhereUniqueInput>
    disconnect?: Enumerable<articlesWhereUniqueInput>
    delete?: Enumerable<articlesWhereUniqueInput>
    update?: Enumerable<articlesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<articlesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<articlesScalarWhereInput>
    upsert?: Enumerable<articlesUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<articlesCreateOrConnectWithoutusersInput>
  }

  export type commentsUpdateManyWithoutUsersInput = {
    create?: Enumerable<commentsCreateWithoutUsersInput>
    connect?: Enumerable<commentsWhereUniqueInput>
    set?: Enumerable<commentsWhereUniqueInput>
    disconnect?: Enumerable<commentsWhereUniqueInput>
    delete?: Enumerable<commentsWhereUniqueInput>
    update?: Enumerable<commentsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<commentsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<commentsScalarWhereInput>
    upsert?: Enumerable<commentsUpsertWithWhereUniqueWithoutUsersInput>
    connectOrCreate?: Enumerable<commentsCreateOrConnectWithoutusersInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedEnumarticles_statusFilter = {
    equals?: articles_status
    in?: Enumerable<articles_status>
    notIn?: Enumerable<articles_status>
    not?: NestedEnumarticles_statusFilter | articles_status
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedEnumusers_statusFilter = {
    equals?: users_status
    in?: Enumerable<users_status>
    notIn?: Enumerable<users_status>
    not?: NestedEnumusers_statusFilter | users_status
  }

  export type usersCreateWithoutArticlesInput = {
    email: string
    password: string
    status?: users_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    comments?: commentsCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutarticlesInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutArticlesInput
  }

  export type commentsCreateWithoutArticlesInput = {
    body: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    users: usersCreateOneWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutarticlesInput = {
    where: commentsWhereUniqueInput
    create: commentsCreateWithoutArticlesInput
  }

  export type usersUpdateWithoutArticlesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: Enumusers_statusFieldUpdateOperationsInput | users_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: commentsUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutArticlesInput = {
    update: usersUpdateWithoutArticlesInput
    create: usersCreateWithoutArticlesInput
  }

  export type commentsUpdateWithWhereUniqueWithoutArticlesInput = {
    where: commentsWhereUniqueInput
    data: commentsUpdateWithoutArticlesInput
  }

  export type commentsUpdateManyWithWhereWithoutArticlesInput = {
    where: commentsScalarWhereInput
    data: commentsUpdateManyMutationInput
  }

  export type commentsScalarWhereInput = {
    AND?: Enumerable<commentsScalarWhereInput>
    OR?: Enumerable<commentsScalarWhereInput>
    NOT?: Enumerable<commentsScalarWhereInput>
    id?: IntFilter | number
    article_id?: IntFilter | number
    user_id?: IntFilter | number
    body?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    deleted_at?: DateTimeNullableFilter | Date | string | null
  }

  export type commentsUpsertWithWhereUniqueWithoutArticlesInput = {
    where: commentsWhereUniqueInput
    update: commentsUpdateWithoutArticlesInput
    create: commentsCreateWithoutArticlesInput
  }

  export type articlesCreateWithoutCommentsInput = {
    title: string
    body: string
    status?: articles_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    users: usersCreateOneWithoutArticlesInput
  }

  export type articlesCreateOrConnectWithoutcommentsInput = {
    where: articlesWhereUniqueInput
    create: articlesCreateWithoutCommentsInput
  }

  export type usersCreateWithoutCommentsInput = {
    email: string
    password: string
    status?: users_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    articles?: articlesCreateManyWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutcommentsInput = {
    where: usersWhereUniqueInput
    create: usersCreateWithoutCommentsInput
  }

  export type articlesUpdateWithoutCommentsInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: Enumarticles_statusFieldUpdateOperationsInput | articles_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutArticlesInput
  }

  export type articlesUpsertWithoutCommentsInput = {
    update: articlesUpdateWithoutCommentsInput
    create: articlesCreateWithoutCommentsInput
  }

  export type usersUpdateWithoutCommentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: Enumusers_statusFieldUpdateOperationsInput | users_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    articles?: articlesUpdateManyWithoutUsersInput
  }

  export type usersUpsertWithoutCommentsInput = {
    update: usersUpdateWithoutCommentsInput
    create: usersCreateWithoutCommentsInput
  }

  export type articlesCreateWithoutUsersInput = {
    title: string
    body: string
    status?: articles_status
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    comments?: commentsCreateManyWithoutArticlesInput
  }

  export type articlesCreateOrConnectWithoutusersInput = {
    where: articlesWhereUniqueInput
    create: articlesCreateWithoutUsersInput
  }

  export type commentsCreateWithoutUsersInput = {
    body: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    deleted_at?: Date | string | null
    articles: articlesCreateOneWithoutCommentsInput
  }

  export type commentsCreateOrConnectWithoutusersInput = {
    where: commentsWhereUniqueInput
    create: commentsCreateWithoutUsersInput
  }

  export type articlesUpdateWithWhereUniqueWithoutUsersInput = {
    where: articlesWhereUniqueInput
    data: articlesUpdateWithoutUsersInput
  }

  export type articlesUpdateManyWithWhereWithoutUsersInput = {
    where: articlesScalarWhereInput
    data: articlesUpdateManyMutationInput
  }

  export type articlesScalarWhereInput = {
    AND?: Enumerable<articlesScalarWhereInput>
    OR?: Enumerable<articlesScalarWhereInput>
    NOT?: Enumerable<articlesScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    title?: StringFilter | string
    body?: StringFilter | string
    status?: Enumarticles_statusFilter | articles_status
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    deleted_at?: DateTimeNullableFilter | Date | string | null
  }

  export type articlesUpsertWithWhereUniqueWithoutUsersInput = {
    where: articlesWhereUniqueInput
    update: articlesUpdateWithoutUsersInput
    create: articlesCreateWithoutUsersInput
  }

  export type commentsUpdateWithWhereUniqueWithoutUsersInput = {
    where: commentsWhereUniqueInput
    data: commentsUpdateWithoutUsersInput
  }

  export type commentsUpdateManyWithWhereWithoutUsersInput = {
    where: commentsScalarWhereInput
    data: commentsUpdateManyMutationInput
  }

  export type commentsUpsertWithWhereUniqueWithoutUsersInput = {
    where: commentsWhereUniqueInput
    update: commentsUpdateWithoutUsersInput
    create: commentsCreateWithoutUsersInput
  }

  export type commentsUpdateWithoutArticlesInput = {
    body?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutCommentsInput
  }

  export type articlesUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    body?: StringFieldUpdateOperationsInput | string
    status?: Enumarticles_statusFieldUpdateOperationsInput | articles_status
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: commentsUpdateManyWithoutArticlesInput
  }

  export type commentsUpdateWithoutUsersInput = {
    body?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deleted_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    articles?: articlesUpdateOneRequiredWithoutCommentsInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.ArticlesScalarFieldEnum`
 */
export type ArticlesScalarFieldEnum = Prisma.ArticlesScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CommentsScalarFieldEnum`
 */
export type CommentsScalarFieldEnum = Prisma.CommentsScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.UsersScalarFieldEnum`
 */
export type UsersScalarFieldEnum = Prisma.UsersScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateArticles`
 */
export type AggregateArticles = Prisma.AggregateArticles

/**
 * @deprecated Renamed to `Prisma.ArticlesAvgAggregateOutputType`
 */
export type ArticlesAvgAggregateOutputType = Prisma.ArticlesAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ArticlesSumAggregateOutputType`
 */
export type ArticlesSumAggregateOutputType = Prisma.ArticlesSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ArticlesMinAggregateOutputType`
 */
export type ArticlesMinAggregateOutputType = Prisma.ArticlesMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ArticlesMaxAggregateOutputType`
 */
export type ArticlesMaxAggregateOutputType = Prisma.ArticlesMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.ArticlesCountAggregateOutputType`
 */
export type ArticlesCountAggregateOutputType = Prisma.ArticlesCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateArticlesArgs`
 */
export type AggregateArticlesArgs = Prisma.AggregateArticlesArgs

/**
 * @deprecated Renamed to `Prisma.ArticlesAvgAggregateInputType`
 */
export type ArticlesAvgAggregateInputType = Prisma.ArticlesAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ArticlesSumAggregateInputType`
 */
export type ArticlesSumAggregateInputType = Prisma.ArticlesSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ArticlesMinAggregateInputType`
 */
export type ArticlesMinAggregateInputType = Prisma.ArticlesMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ArticlesMaxAggregateInputType`
 */
export type ArticlesMaxAggregateInputType = Prisma.ArticlesMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.ArticlesCountAggregateInputType`
 */
export type ArticlesCountAggregateInputType = Prisma.ArticlesCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.articlesSelect`
 */
export type articlesSelect = Prisma.articlesSelect

/**
 * @deprecated Renamed to `Prisma.articlesInclude`
 */
export type articlesInclude = Prisma.articlesInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquearticlesArgs`
 */
export type FindUniquearticlesArgs = Prisma.FindUniquearticlesArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstarticlesArgs`
 */
export type FindFirstarticlesArgs = Prisma.FindFirstarticlesArgs

/**
 * @deprecated Renamed to `Prisma.FindManyarticlesArgs`
 */
export type FindManyarticlesArgs = Prisma.FindManyarticlesArgs

/**
 * @deprecated Renamed to `Prisma.articlesCreateArgs`
 */
export type articlesCreateArgs = Prisma.articlesCreateArgs

/**
 * @deprecated Renamed to `Prisma.articlesUpdateArgs`
 */
export type articlesUpdateArgs = Prisma.articlesUpdateArgs

/**
 * @deprecated Renamed to `Prisma.articlesUpdateManyArgs`
 */
export type articlesUpdateManyArgs = Prisma.articlesUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.articlesUpsertArgs`
 */
export type articlesUpsertArgs = Prisma.articlesUpsertArgs

/**
 * @deprecated Renamed to `Prisma.articlesDeleteArgs`
 */
export type articlesDeleteArgs = Prisma.articlesDeleteArgs

/**
 * @deprecated Renamed to `Prisma.articlesDeleteManyArgs`
 */
export type articlesDeleteManyArgs = Prisma.articlesDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateComments`
 */
export type AggregateComments = Prisma.AggregateComments

/**
 * @deprecated Renamed to `Prisma.CommentsAvgAggregateOutputType`
 */
export type CommentsAvgAggregateOutputType = Prisma.CommentsAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentsSumAggregateOutputType`
 */
export type CommentsSumAggregateOutputType = Prisma.CommentsSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentsMinAggregateOutputType`
 */
export type CommentsMinAggregateOutputType = Prisma.CommentsMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentsMaxAggregateOutputType`
 */
export type CommentsMaxAggregateOutputType = Prisma.CommentsMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentsCountAggregateOutputType`
 */
export type CommentsCountAggregateOutputType = Prisma.CommentsCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCommentsArgs`
 */
export type AggregateCommentsArgs = Prisma.AggregateCommentsArgs

/**
 * @deprecated Renamed to `Prisma.CommentsAvgAggregateInputType`
 */
export type CommentsAvgAggregateInputType = Prisma.CommentsAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentsSumAggregateInputType`
 */
export type CommentsSumAggregateInputType = Prisma.CommentsSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentsMinAggregateInputType`
 */
export type CommentsMinAggregateInputType = Prisma.CommentsMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentsMaxAggregateInputType`
 */
export type CommentsMaxAggregateInputType = Prisma.CommentsMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentsCountAggregateInputType`
 */
export type CommentsCountAggregateInputType = Prisma.CommentsCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.commentsSelect`
 */
export type commentsSelect = Prisma.commentsSelect

/**
 * @deprecated Renamed to `Prisma.commentsInclude`
 */
export type commentsInclude = Prisma.commentsInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquecommentsArgs`
 */
export type FindUniquecommentsArgs = Prisma.FindUniquecommentsArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstcommentsArgs`
 */
export type FindFirstcommentsArgs = Prisma.FindFirstcommentsArgs

/**
 * @deprecated Renamed to `Prisma.FindManycommentsArgs`
 */
export type FindManycommentsArgs = Prisma.FindManycommentsArgs

/**
 * @deprecated Renamed to `Prisma.commentsCreateArgs`
 */
export type commentsCreateArgs = Prisma.commentsCreateArgs

/**
 * @deprecated Renamed to `Prisma.commentsUpdateArgs`
 */
export type commentsUpdateArgs = Prisma.commentsUpdateArgs

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyArgs`
 */
export type commentsUpdateManyArgs = Prisma.commentsUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.commentsUpsertArgs`
 */
export type commentsUpsertArgs = Prisma.commentsUpsertArgs

/**
 * @deprecated Renamed to `Prisma.commentsDeleteArgs`
 */
export type commentsDeleteArgs = Prisma.commentsDeleteArgs

/**
 * @deprecated Renamed to `Prisma.commentsDeleteManyArgs`
 */
export type commentsDeleteManyArgs = Prisma.commentsDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUsers`
 */
export type AggregateUsers = Prisma.AggregateUsers

/**
 * @deprecated Renamed to `Prisma.UsersAvgAggregateOutputType`
 */
export type UsersAvgAggregateOutputType = Prisma.UsersAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersSumAggregateOutputType`
 */
export type UsersSumAggregateOutputType = Prisma.UsersSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersMinAggregateOutputType`
 */
export type UsersMinAggregateOutputType = Prisma.UsersMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersMaxAggregateOutputType`
 */
export type UsersMaxAggregateOutputType = Prisma.UsersMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UsersCountAggregateOutputType`
 */
export type UsersCountAggregateOutputType = Prisma.UsersCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUsersArgs`
 */
export type AggregateUsersArgs = Prisma.AggregateUsersArgs

/**
 * @deprecated Renamed to `Prisma.UsersAvgAggregateInputType`
 */
export type UsersAvgAggregateInputType = Prisma.UsersAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersSumAggregateInputType`
 */
export type UsersSumAggregateInputType = Prisma.UsersSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersMinAggregateInputType`
 */
export type UsersMinAggregateInputType = Prisma.UsersMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersMaxAggregateInputType`
 */
export type UsersMaxAggregateInputType = Prisma.UsersMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UsersCountAggregateInputType`
 */
export type UsersCountAggregateInputType = Prisma.UsersCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.usersSelect`
 */
export type usersSelect = Prisma.usersSelect

/**
 * @deprecated Renamed to `Prisma.usersInclude`
 */
export type usersInclude = Prisma.usersInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueusersArgs`
 */
export type FindUniqueusersArgs = Prisma.FindUniqueusersArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstusersArgs`
 */
export type FindFirstusersArgs = Prisma.FindFirstusersArgs

/**
 * @deprecated Renamed to `Prisma.FindManyusersArgs`
 */
export type FindManyusersArgs = Prisma.FindManyusersArgs

/**
 * @deprecated Renamed to `Prisma.usersCreateArgs`
 */
export type usersCreateArgs = Prisma.usersCreateArgs

/**
 * @deprecated Renamed to `Prisma.usersUpdateArgs`
 */
export type usersUpdateArgs = Prisma.usersUpdateArgs

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyArgs`
 */
export type usersUpdateManyArgs = Prisma.usersUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.usersUpsertArgs`
 */
export type usersUpsertArgs = Prisma.usersUpsertArgs

/**
 * @deprecated Renamed to `Prisma.usersDeleteArgs`
 */
export type usersDeleteArgs = Prisma.usersDeleteArgs

/**
 * @deprecated Renamed to `Prisma.usersDeleteManyArgs`
 */
export type usersDeleteManyArgs = Prisma.usersDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.articlesWhereInput`
 */
export type articlesWhereInput = Prisma.articlesWhereInput

/**
 * @deprecated Renamed to `Prisma.articlesOrderByInput`
 */
export type articlesOrderByInput = Prisma.articlesOrderByInput

/**
 * @deprecated Renamed to `Prisma.articlesWhereUniqueInput`
 */
export type articlesWhereUniqueInput = Prisma.articlesWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.commentsWhereInput`
 */
export type commentsWhereInput = Prisma.commentsWhereInput

/**
 * @deprecated Renamed to `Prisma.commentsOrderByInput`
 */
export type commentsOrderByInput = Prisma.commentsOrderByInput

/**
 * @deprecated Renamed to `Prisma.commentsWhereUniqueInput`
 */
export type commentsWhereUniqueInput = Prisma.commentsWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.usersWhereInput`
 */
export type usersWhereInput = Prisma.usersWhereInput

/**
 * @deprecated Renamed to `Prisma.usersOrderByInput`
 */
export type usersOrderByInput = Prisma.usersOrderByInput

/**
 * @deprecated Renamed to `Prisma.usersWhereUniqueInput`
 */
export type usersWhereUniqueInput = Prisma.usersWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateInput`
 */
export type articlesCreateInput = Prisma.articlesCreateInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateInput`
 */
export type articlesUpdateInput = Prisma.articlesUpdateInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateManyMutationInput`
 */
export type articlesUpdateManyMutationInput = Prisma.articlesUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateInput`
 */
export type commentsCreateInput = Prisma.commentsCreateInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateInput`
 */
export type commentsUpdateInput = Prisma.commentsUpdateInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyMutationInput`
 */
export type commentsUpdateManyMutationInput = Prisma.commentsUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.usersCreateInput`
 */
export type usersCreateInput = Prisma.usersCreateInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateInput`
 */
export type usersUpdateInput = Prisma.usersUpdateInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateManyMutationInput`
 */
export type usersUpdateManyMutationInput = Prisma.usersUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.Enumarticles_statusFilter`
 */
export type Enumarticles_statusFilter = Prisma.Enumarticles_statusFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeNullableFilter`
 */
export type DateTimeNullableFilter = Prisma.DateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.UsersRelationFilter`
 */
export type UsersRelationFilter = Prisma.UsersRelationFilter

/**
 * @deprecated Renamed to `Prisma.CommentsListRelationFilter`
 */
export type CommentsListRelationFilter = Prisma.CommentsListRelationFilter

/**
 * @deprecated Renamed to `Prisma.ArticlesRelationFilter`
 */
export type ArticlesRelationFilter = Prisma.ArticlesRelationFilter

/**
 * @deprecated Renamed to `Prisma.Enumusers_statusFilter`
 */
export type Enumusers_statusFilter = Prisma.Enumusers_statusFilter

/**
 * @deprecated Renamed to `Prisma.ArticlesListRelationFilter`
 */
export type ArticlesListRelationFilter = Prisma.ArticlesListRelationFilter

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutArticlesInput`
 */
export type usersCreateOneWithoutArticlesInput = Prisma.usersCreateOneWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateManyWithoutArticlesInput`
 */
export type commentsCreateManyWithoutArticlesInput = Prisma.commentsCreateManyWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.Enumarticles_statusFieldUpdateOperationsInput`
 */
export type Enumarticles_statusFieldUpdateOperationsInput = Prisma.Enumarticles_statusFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableDateTimeFieldUpdateOperationsInput`
 */
export type NullableDateTimeFieldUpdateOperationsInput = Prisma.NullableDateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutArticlesInput`
 */
export type usersUpdateOneRequiredWithoutArticlesInput = Prisma.usersUpdateOneRequiredWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyWithoutArticlesInput`
 */
export type commentsUpdateManyWithoutArticlesInput = Prisma.commentsUpdateManyWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateOneWithoutCommentsInput`
 */
export type articlesCreateOneWithoutCommentsInput = Prisma.articlesCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOneWithoutCommentsInput`
 */
export type usersCreateOneWithoutCommentsInput = Prisma.usersCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateOneRequiredWithoutCommentsInput`
 */
export type articlesUpdateOneRequiredWithoutCommentsInput = Prisma.articlesUpdateOneRequiredWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateOneRequiredWithoutCommentsInput`
 */
export type usersUpdateOneRequiredWithoutCommentsInput = Prisma.usersUpdateOneRequiredWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateManyWithoutUsersInput`
 */
export type articlesCreateManyWithoutUsersInput = Prisma.articlesCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateManyWithoutUsersInput`
 */
export type commentsCreateManyWithoutUsersInput = Prisma.commentsCreateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.Enumusers_statusFieldUpdateOperationsInput`
 */
export type Enumusers_statusFieldUpdateOperationsInput = Prisma.Enumusers_statusFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateManyWithoutUsersInput`
 */
export type articlesUpdateManyWithoutUsersInput = Prisma.articlesUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyWithoutUsersInput`
 */
export type commentsUpdateManyWithoutUsersInput = Prisma.commentsUpdateManyWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumarticles_statusFilter`
 */
export type NestedEnumarticles_statusFilter = Prisma.NestedEnumarticles_statusFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeNullableFilter`
 */
export type NestedDateTimeNullableFilter = Prisma.NestedDateTimeNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedEnumusers_statusFilter`
 */
export type NestedEnumusers_statusFilter = Prisma.NestedEnumusers_statusFilter

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutArticlesInput`
 */
export type usersCreateWithoutArticlesInput = Prisma.usersCreateWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutarticlesInput`
 */
export type usersCreateOrConnectWithoutarticlesInput = Prisma.usersCreateOrConnectWithoutarticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateWithoutArticlesInput`
 */
export type commentsCreateWithoutArticlesInput = Prisma.commentsCreateWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateOrConnectWithoutarticlesInput`
 */
export type commentsCreateOrConnectWithoutarticlesInput = Prisma.commentsCreateOrConnectWithoutarticlesInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutArticlesInput`
 */
export type usersUpdateWithoutArticlesInput = Prisma.usersUpdateWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutArticlesInput`
 */
export type usersUpsertWithoutArticlesInput = Prisma.usersUpsertWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateWithWhereUniqueWithoutArticlesInput`
 */
export type commentsUpdateWithWhereUniqueWithoutArticlesInput = Prisma.commentsUpdateWithWhereUniqueWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyWithWhereWithoutArticlesInput`
 */
export type commentsUpdateManyWithWhereWithoutArticlesInput = Prisma.commentsUpdateManyWithWhereWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.commentsScalarWhereInput`
 */
export type commentsScalarWhereInput = Prisma.commentsScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.commentsUpsertWithWhereUniqueWithoutArticlesInput`
 */
export type commentsUpsertWithWhereUniqueWithoutArticlesInput = Prisma.commentsUpsertWithWhereUniqueWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateWithoutCommentsInput`
 */
export type articlesCreateWithoutCommentsInput = Prisma.articlesCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateOrConnectWithoutcommentsInput`
 */
export type articlesCreateOrConnectWithoutcommentsInput = Prisma.articlesCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateWithoutCommentsInput`
 */
export type usersCreateWithoutCommentsInput = Prisma.usersCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.usersCreateOrConnectWithoutcommentsInput`
 */
export type usersCreateOrConnectWithoutcommentsInput = Prisma.usersCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateWithoutCommentsInput`
 */
export type articlesUpdateWithoutCommentsInput = Prisma.articlesUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesUpsertWithoutCommentsInput`
 */
export type articlesUpsertWithoutCommentsInput = Prisma.articlesUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.usersUpdateWithoutCommentsInput`
 */
export type usersUpdateWithoutCommentsInput = Prisma.usersUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.usersUpsertWithoutCommentsInput`
 */
export type usersUpsertWithoutCommentsInput = Prisma.usersUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateWithoutUsersInput`
 */
export type articlesCreateWithoutUsersInput = Prisma.articlesCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.articlesCreateOrConnectWithoutusersInput`
 */
export type articlesCreateOrConnectWithoutusersInput = Prisma.articlesCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateWithoutUsersInput`
 */
export type commentsCreateWithoutUsersInput = Prisma.commentsCreateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsCreateOrConnectWithoutusersInput`
 */
export type commentsCreateOrConnectWithoutusersInput = Prisma.commentsCreateOrConnectWithoutusersInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateWithWhereUniqueWithoutUsersInput`
 */
export type articlesUpdateWithWhereUniqueWithoutUsersInput = Prisma.articlesUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateManyWithWhereWithoutUsersInput`
 */
export type articlesUpdateManyWithWhereWithoutUsersInput = Prisma.articlesUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.articlesScalarWhereInput`
 */
export type articlesScalarWhereInput = Prisma.articlesScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.articlesUpsertWithWhereUniqueWithoutUsersInput`
 */
export type articlesUpsertWithWhereUniqueWithoutUsersInput = Prisma.articlesUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateWithWhereUniqueWithoutUsersInput`
 */
export type commentsUpdateWithWhereUniqueWithoutUsersInput = Prisma.commentsUpdateWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateManyWithWhereWithoutUsersInput`
 */
export type commentsUpdateManyWithWhereWithoutUsersInput = Prisma.commentsUpdateManyWithWhereWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpsertWithWhereUniqueWithoutUsersInput`
 */
export type commentsUpsertWithWhereUniqueWithoutUsersInput = Prisma.commentsUpsertWithWhereUniqueWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateWithoutArticlesInput`
 */
export type commentsUpdateWithoutArticlesInput = Prisma.commentsUpdateWithoutArticlesInput

/**
 * @deprecated Renamed to `Prisma.articlesUpdateWithoutUsersInput`
 */
export type articlesUpdateWithoutUsersInput = Prisma.articlesUpdateWithoutUsersInput

/**
 * @deprecated Renamed to `Prisma.commentsUpdateWithoutUsersInput`
 */
export type commentsUpdateWithoutUsersInput = Prisma.commentsUpdateWithoutUsersInput